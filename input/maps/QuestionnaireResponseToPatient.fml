map "http://openhie.org/fhir/sri-lanka/StructureMap/QuestionnaireResponseToPatient" = "QuestionnaireResponseToPatient"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QResp as source
uses "http://openhie.org/fhir/sri-lanka/StructureDefinition/RegisterPatientDataDictionary" alias IMMZC as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target

imports "http://openhie.org/fhir/sri-lanka/StructureMap/QuestionnaireResponseToLogicalModel"
imports "http://openhie.org/fhir/sri-lanka/StructureMap/LogicalModelToPatient"

group QRestToIMMZC (
  source qr : QResp,
  target bundle: Bundle
) {
  qr -> bundle.id = uuid() "ruleBundleId";
  qr -> bundle.type = 'collection' "ruleBundleType";
  qr -> bundle.entry as entry, entry.resource = create('Patient') as patient,
    create("http://openhie.org/fhir/sri-lanka/StructureDefinition/RegisterPatientDataDictionary") as model
      then{
        qr -> model then QRespToIMMZC( qr, model) "QRtoLM";
        qr -> patient then DataDictToPatient( model, patient ) "LMtoPatient";
        qr -> patient.active = true "rulePatientActive";
      } "QRtoPatient";
} "QRestToIMMZC";