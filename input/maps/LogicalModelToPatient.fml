map "http://openhie.org/fhir/sri-lanka/StructureMap/LogicalModelToPatient" = "LogicalModelToPatient"

uses "http://openhie.org/fhir/sri-lanka/StructureDefinition/RegisterPatientDataDictionary" alias IMMZC as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as target

name = "Logical Model To Patient"
description = "Maps the logical model data elements to the Patient resource data elements."

group DataDictToPatient (
  source immzc : IMMZC,
  target patient: Patient
) {

  immzc.personalHealthNumber as id1 -> patient.identifier as identifier then {
    id1 -> identifier.value = id1 "SetPersonalHealthNumberValue";
  } "SetPHN";

  immzc.nationalIdentityCard as id2 -> patient.identifier as identifier then {
    id2 -> identifier.value = id2 "SetNationalIdentityCardNumberValue";
  } "SetNIC";

  immzc.pasport as id3 -> patient.identifier as identifier then {
    id3 -> identifier.value = id3 "SetPassportNumberValue";
  } "SetPassport";

  immzc.drivingLicense as id4 -> patient.identifier as identifier then {
    id4 -> identifier.value = id4 "SetDrivingLicenseNumberValue";
  } "SetDL";

  immzc.seniorCitizenNumber as id5 -> patient.identifier as identifier then {
    id5 -> identifier.value = id5 "SetSeniorCitizenNumberValue";
  } "SetSCN";
  
  //immzc -> patient.name as pname then NameToHumanName( immzc, pname ) "SetName";

 immzc.sex as sex -> patient.gender = translate(sex, 'http://openhie.org/fhir/sri-lanka/ConceptMap/DataDictionarySexToAdministrativeGender', 'code') "SetGender";

  immzc.birthDate as birthDate -> patient.birthDate = birthDate "SetBirthDate";

  //immzc.patientName as patient -> patient.name as pName
    //then NameToHumanName( patient, pName ) "SetPatientNames";

  immzc.patientName as patientName -> patient.name as hname 
    then NameToHumanName( patientName, hname ) "SetPatientNames";

  immzc.address as address -> patient.address as haddy 
    then AddyToAddress( address, haddy ) "SetAddresses";

  immzc.contactDetails as contactDetails -> patient.telecom as hcontact 
    then ContactDetailsToContactPoint( contactDetails, hcontact ) "SetContactDetails";

 /* immzc.phone as phone -> patient.telecom as telecom then {
    phone as content -> telecom.value = content, telecom.system = 'phone' "SetPhoneValue";
  } "SetPhone";*/

  /*immzc.administrativeArea as area -> patient.address as address then {
    area.coding first as coding -> address then {
      coding.code as content -> address.text = content "SetAddressToCode";
      coding.display as content -> address.text = content "SetAddressToDisplay";
    } "SetAddressText";
  } "SetAdministrativeArea";*/


}

group NameToHumanName (
  source name,
  target hname
) {
  name.fullName as fullName -> hname.text = fullName "SetFullName";
  name.firstName as firstName -> hname.given = firstName "SetFirstName";
  name.surname as surname -> hname.family = surname "SetFamilyName";
}

group AddyToAddress (
  source address,
  target haddy
) {
  address.streetNameAndNr as streetNameAndNr -> haddy.line = streetNameAndNr "SetStreetNameAndNr";
  address.city as city -> haddy.city = city "SetCity";
  address.state as state -> haddy.state = state "SetState";
  address.country as country -> haddy.country = country "SetCountry";
  address.postalCode as postalCode -> haddy.postalCode = postalCode "SetPostalCode";
}

group ContactDetailsToContactPoint (
  source contact,
  target hcontact
) {
  contact.mobileNumber as mobileNumber -> hcontact.value = mobileNumber "SetMobileNumber";
  contact.landline as landline -> hcontact.value = landline "SetLandline";
}